{"version":3,"sources":["../src/getTranslations.js"],"names":["openTag","closeTag","extract","regexp","output","languages","err","files","console","log","map","data","readFileSync","file","results","match","texts","getTexts","existsSync","addNewTranslations","createTranslationsFile","openTagPosition","result","indexOf","closeTagPosition","text","substr","length","addLanguages","object","language","template","JSON","stringify","writeFileSync","translationsFile","parse","newKeysText","Object","keys","key"],"mappings":";;;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,UAAU,aAAhB;AACA,IAAMC,WAAW,cAAjB;;AAEO,IAAMC,4BAAU,SAAVA,OAAU,CAACC,MAAD,EAASC,MAAT,EAAiBC,SAAjB,EAA+B;AACpD,sBAAKF,MAAL,EAAa,UAACG,GAAD,EAAMC,KAAN,EAAgB;AAC3B,QAAID,GAAJ,EAASE,QAAQC,GAAR,CAAYH,GAAZ;AACTC,UAAMG,GAAN,CAAU,gBAAQ;AAChB,UAAIC,OAAO,aAAGC,YAAH,CAAgBC,IAAhB,EAAsB,MAAtB,CAAX;AACA,UAAIV,SAAS,kCAAb;AACA,UAAIW,UAAUH,KAAKI,KAAL,CAAWZ,MAAX,CAAd;AACA,UAAIW,OAAJ,EAAa;AACX,YAAIE,QAAQC,SAASH,OAAT,EAAkBT,SAAlB,CAAZ;AACA,YAAI,aAAGa,UAAH,CAAcd,MAAd,CAAJ,EAA2B;AACzBe,6BAAmBf,MAAnB,EAA2BY,KAA3B;AACD,SAFD,MAEO;AACLI,iCAAuBhB,MAAvB,EAA+BY,KAA/B;AACD;AACF;AACF,KAZD;AAaD,GAfD;AAgBD,CAjBM;;AAmBA,IAAMC,8BAAW,SAAXA,QAAW,CAACH,OAAD,EAAUT,SAAV,EAAwB;AAC9C,MAAIW,QAAQ,EAAZ;AACAF,UAAQJ,GAAR,CAAY,kBAAU;AACpB,QAAIW,kBAAkBC,OAAOC,OAAP,CAAevB,OAAf,CAAtB;AACA,QAAIwB,mBAAmBF,OAAOC,OAAP,CAAetB,QAAf,CAAvB;AACA,QAAIwB,OAAOH,OAAOI,MAAP,CAAcL,kBAAkBrB,QAAQ2B,MAAxC,EAAgDH,oBAAoBvB,SAAS0B,MAAT,GAAkB,CAAtC,CAAhD,CAAX;AACAX,UAAMS,IAAN,IAAcG,aAAavB,SAAb,CAAd;AACD,GALD;AAMA,SAAOW,KAAP;AACD,CATM;;AAWA,IAAMY,sCAAe,SAAfA,YAAe,CAACvB,SAAD,EAAe;AACzC,MAAIA,aAAaA,UAAUsB,MAA3B,EAAmC;AACjC,QAAIE,SAAS,EAAb;AACAxB,cAAUK,GAAV,CAAc,oBAAY;AACxBmB,aAAOC,QAAP,IAAmB,EAAnB;AACD,KAFD;AAGA,WAAOD,MAAP;AACD,GAND,MAMO;AACL,WAAO,EAAP;AACD;AACF,CAVM;;AAYA,IAAMT,0DAAyB,SAAzBA,sBAAyB,CAAChB,MAAD,EAASY,KAAT,EAAmB;AACvD,MAAMe,WAAWC,KAAKC,SAAL,CAAejB,KAAf,EAAsB,IAAtB,EAA4B,CAA5B,CAAjB;AACA,eAAGkB,aAAH,CAAiB9B,MAAjB,EAAyB2B,QAAzB;AACAvB,UAAQC,GAAR,CAAY,4BAAZ;AACD,CAJM;;AAMA,IAAMU,kDAAqB,SAArBA,kBAAqB,CAACf,MAAD,EAASY,KAAT,EAAmB;AACnD,MAAIL,OAAO,aAAGC,YAAH,CAAgBR,MAAhB,EAAwB,MAAxB,CAAX;AACA,MAAM+B,mBAAmBH,KAAKI,KAAL,CAAWzB,IAAX,CAAzB;AACA,MAAI0B,cAAcC,OAAOC,IAAP,CAAYvB,KAAZ,CAAlB;AACAqB,cAAY3B,GAAZ,CAAgB,eAAO;AACrB,QAAI,CAACyB,iBAAiBK,GAAjB,CAAL,EAA4B;AAC1BL,uBAAiBK,GAAjB,IAAwBxB,MAAMwB,GAAN,CAAxB;AACD;AACF,GAJD;AAKA,MAAMT,WAAWC,KAAKC,SAAL,CAAeE,gBAAf,EAAiC,IAAjC,EAAuC,CAAvC,CAAjB;AACA,eAAGD,aAAH,CAAiB9B,MAAjB,EAAyB2B,QAAzB;AACAvB,UAAQC,GAAR,CAAY,6CAAZ;AACD,CAZM","file":"getTranslations.js","sourcesContent":["import fs from 'fs'\nimport glob from 'glob'\n\nconst openTag = '<Translate>'\nconst closeTag = '</Translate>'\n\nexport const extract = (regexp, output, languages) => {\n  glob(regexp, (err, files) => {\n    if (err) console.log(err)\n    files.map(file => {\n      let data = fs.readFileSync(file, 'utf8')\n      let regexp = /<Translate>.[^<>]*<\\/Translate>/g\n      let results = data.match(regexp)\n      if (results) {\n        let texts = getTexts(results, languages)\n        if (fs.existsSync(output)) {\n          addNewTranslations(output, texts)\n        } else {\n          createTranslationsFile(output, texts)\n        }\n      }\n    })\n  })\n}\n\nexport const getTexts = (results, languages) => {\n  let texts = {}\n  results.map(result => {\n    let openTagPosition = result.indexOf(openTag)\n    let closeTagPosition = result.indexOf(closeTag)\n    let text = result.substr(openTagPosition + openTag.length, closeTagPosition - (closeTag.length - 1))\n    texts[text] = addLanguages(languages)\n  })\n  return texts\n}\n\nexport const addLanguages = (languages) => {\n  if (languages && languages.length) {\n    let object = {}\n    languages.map(language => {\n      object[language] = \"\"\n    })\n    return object\n  } else {\n    return {}\n  }\n}\n\nexport const createTranslationsFile = (output, texts) => {\n  const template = JSON.stringify(texts, null, 2)\n  fs.writeFileSync(output, template)\n  console.log('Translations file created!')\n}\n\nexport const addNewTranslations = (output, texts) => {\n  let data = fs.readFileSync(output, 'utf8')\n  const translationsFile = JSON.parse(data)\n  let newKeysText = Object.keys(texts)\n  newKeysText.map(key => {\n    if (!translationsFile[key]) {\n      translationsFile[key] = texts[key]\n    }\n  })\n  const template = JSON.stringify(translationsFile, null, 2)\n  fs.writeFileSync(output, template)\n  console.log('New translations added to translation file!')\n}\n"]}